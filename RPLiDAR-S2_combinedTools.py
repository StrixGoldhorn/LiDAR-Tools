'''
MIT License

Copyright (c) 2025 StrixGoldhorn

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.






For SLAMTEC RSLiDAR S2

What this does:
Reads user-provided dump files (generated by SLAMTEC's FrameGrabber app demo).
Generates point cloud, saves to folder.
Generates INDIVIDUAL visualisation of whether data exists at user-specified angle range, saves to folder.
Generates COMBINED visualisation of whether data exists at user-specified angle range, saves to folder.
Generates a scatter plot of all points within START_ANGLE_AFFECTED and END_ANGLE_AFFECTED for data files located in folder READ_FOLDER_NAME.
Generates a scatter plot of all points within START_ANGLE_NORMAL and END_ANGLE_NORMAL for data files located in folder READ_FOLDER_NAME.

How to use:
Upload dump files a folder named FOLDER_NAME
Open cmd, run ./RPLiDAR-S2_combinedTools.py "FOLDER_NAME"

Optional arguments:
  -h, --help            show help message and exit
  --filename-arr FILENAME_ARR [FILENAME_ARR ...]
                        Names of data files.
  -maxd MAX_DISTANCE_SHOWN, --max-distance-shown MAX_DISTANCE_SHOWN
                        Max distance to be shown in Point Cloud (in meters).
  -sa START_ANGLE_AFFECTED, --start-angle-affected START_ANGLE_AFFECTED
                        Start angle for affected values.
  -ea END_ANGLE_AFFECTED, --end-angle-affected END_ANGLE_AFFECTED
                        End angle for affected values.
  -sn START_ANGLE_NORMAL, --start-angle-normal START_ANGLE_NORMAL
                        Start angle for normal values.
  -en END_ANGLE_NORMAL, --end-angle-normal END_ANGLE_NORMAL
                        End angle for normal values.
  -d, --display         If true, shows plots before saving.
'''

import matplotlib.pyplot as plt
import numpy as np
import os
import argparse

def polar_to_cartesian(angles: np.ndarray, distances: np.ndarray) -> tuple[np.ndarray, np.ndarray]:
    """ Converts from polar to cartesian coordinate system.
        
        Args:
            angles: np.ndarray of angle values
            distances: np.ndarray of distance values
    """
    # Convert degrees to radians
    radians = np.deg2rad(angles)
    
    # Convert to Cartesian
    x_coords = distances * np.cos(radians)
    y_coords = distances * np.sin(radians)
    
    return x_coords, y_coords

def combined_scatter_plot_limited(combined_data_arr: np.ndarray, READ_FOLDER_NAME: str, FILENAME_ARR: list, START_ANGLE: float, END_ANGLE:float, SAVE_FILE_NAME: str, DISPLAY: bool):
    """ Saves (and optionally displays) a scatter plot of
        all points within START_ANGLE and END_ANGLE
        for data files located in folder READ_FOLDER_NAME

        Args:
            combined_data_arr: numpy array with angle, distance, quality, for all data files
            READ_FOLDER_NAME: Folder name of folder where data files are stored
            FILENAME_ARR: Array of filenames of data files in combined_data_arr
            START_ANGLE: Start angle to be processed
            END_ANGLE: End angle to be processed
            SAVE_FILE_NAME: Filename to be saved as
    """
    cnt = 1
    
    # Colors to be used
    colors_arr = ["b", "g", "r", "c", "m", "y", "k", "w"]
    
    fig, ax = plt.subplots()
    
    for data_arr in combined_data_arr:
        angles = data_arr[:, 0]
        distances = data_arr[:, 1]
    
        # Mask to filter the required data        
        mask = (angles >= START_ANGLE) & (angles <= END_ANGLE)
        angles_masked = angles[mask]
        distances_masked = distances[mask]
        
        # Convert from polar to cartesian coords
        x_coords, y_coords = polar_to_cartesian(angles_masked, distances_masked)
        
        # Plot
        ax.scatter(x_coords, y_coords, s=20, c=colors_arr[cnt-1], marker=".", label=FILENAME_ARR[cnt-1])
        
        cnt += 1
    
    # Axes settings
    ax.legend(loc='upper left')
    ax.set_xticks([])
    ax.set_yticks([])
    
    # Add fig label
    fig.suptitle(f"Points from {START_ANGLE} deg to {END_ANGLE} deg")
    
    if DISPLAY == True:
        plt.show()
    
    plt.savefig(f"{READ_FOLDER_NAME}/Scatter Plot Limited/{SAVE_FILE_NAME}.png", dpi=300)
    print(f"{READ_FOLDER_NAME}/Scatter Plot Limited/{SAVE_FILE_NAME} - SAVED!")
    plt.close()
    
def save_pointcloud(data_arr: np.ndarray, READ_FOLDER_NAME: str, READ_FILE_NAME: list, MAX_DIST_SHOWN: int, DISPLAY: bool):
    """ Saves (and optionally displays) point cloud

        Args:
            data_arr: numpy array with angle, distance, quality
            READ_FOLDER_NAME: Folder name of folder where data files are stored
            READ_FILE_NAME: Filename of data file to be processed
    """
    angle_arr = data_arr[:, 0]
    distance_arr = data_arr[:, 1]
    quality_arr = data_arr[:, 2]

    # Convert to radians, prepare to plot
    angles_rad_arr = np.deg2rad(angle_arr)

    # Plot point cloud
    plt.figure(figsize=(8, 8))
    ax = plt.subplot(111, polar=True)
    ax.scatter(angles_rad_arr, distance_arr, c=quality_arr, cmap='viridis', s=0.1)
    
    # Marking settings
    ax.grid(False, axis='y')
    ax.set_yticklabels([])
    detailed_ticks = np.arange(0, 360, 10)  # Every 5 degrees
    ax.set_xticks(np.deg2rad(detailed_ticks))
    
    # View settings
    ax.set_rmax(MAX_DIST_SHOWN)
    ax.set_theta_zero_location("N")
    ax.set_theta_direction(-1)
    
    if DISPLAY == True:
        plt.show()
    
    plt.savefig(f"{READ_FOLDER_NAME}/Point Clouds/{READ_FILE_NAME}.png", dpi=300)
    print(f"{READ_FOLDER_NAME}/Point Clouds/{READ_FILE_NAME} - SAVED!")
    plt.close()

def singular_angle_plot_limited(data_arr: np.ndarray, READ_FOLDER_NAME: str, READ_FILE_NAME: list, START_ANGLE: float, END_ANGLE: float, DISPLAY: bool):
    """ Saves (and optionally displays) plot of
        whether a datapoint exists at angle x, where START_ANGLE <= x <= END_ANGLE
        for data file READ_FILE_NAME located in folder READ_FOLDER_NAME

        Args:
            data_arr: numpy array with angle, distance, quality
            READ_FOLDER_NAME: Folder name of folder where data files are stored
            READ_FILE_NAME: Filename of data file to be processed
            START_ANGLE: Start angle to be processed
            END_ANGLE: End angle to be processed
    """
    angles = data_arr[:, 0]
    
    # Mask to filter the required data
    mask = (angles >= START_ANGLE) & (angles <= END_ANGLE)
    
    # These are the x-values that will be plotted
    plot_angles = angles[mask]
    
    # Set all y-values to 1
    plot_distances = np.ones_like(plot_angles)

    # Plot
    plt.scatter(plot_angles, plot_distances, s=15)
    
    # Marking settings
    plt.xlabel('Angle (degrees)')
    plt.yticks([])
    plt.grid(True, linestyle='--', alpha=0.5)
    
    # View settings
    plt.xlim(START_ANGLE, END_ANGLE)
    
    if DISPLAY == True:
        plt.show()
    
    plt.savefig(f"{READ_FOLDER_NAME}/Angle Plot Limited/{READ_FILE_NAME}.png", dpi=300)
    print(f"{READ_FOLDER_NAME}/Angle Plot Limited/{READ_FILE_NAME} - SAVED!")
    plt.close()

def combined_angle_plot_limited(combined_data_arr: np.ndarray, READ_FOLDER_NAME: str, FILENAME_ARR: list, START_ANGLE: float, END_ANGLE: float, DISPLAY: bool):
    """ Saves (and optionally displays) a combined plot of
        whether a datapoint exists at angle x, where START_ANGLE <= x <= END_ANGLE
        for data file READ_FILE_NAME located in folder READ_FOLDER_NAME

        Args:
            combined_data_arr: numpy array with angle, distance, quality, for all data files
            READ_FOLDER_NAME: Folder name of folder where data files are stored
            FILENAME_ARR: Array of filenames of data files in combined_data_arr
            START_ANGLE: Start angle to be processed
            END_ANGLE: End angle to be processed
    """
    cnt = 1
    total_graphs = len(combined_data_arr)
    
    for data_arr in combined_data_arr:
        angles = data_arr[:, 0]
    
        # Mask to filter the required data        
        mask = (angles >= START_ANGLE) & (angles <= END_ANGLE)
        
        # These are the x-values that will be plotted
        plot_angles = angles[mask]
        
        # Set all y-values to 1
        plot_distances = np.ones_like(plot_angles)
        
        # Plot
        plt.subplot(total_graphs, 1, cnt)
        plt.scatter(plot_angles, plot_distances, s=15)
        
        # Marking settings
        # If last subplot, set label and show degrees
        if cnt == total_graphs:
            plt.xlabel('Angle (degrees)')
        else:
            plt.xticks([])
        plt.ylabel(FILENAME_ARR[cnt-1])
        plt.yticks([])
        plt.grid(True, linestyle='--', alpha=0.5)
        
        # View settings
        plt.xlim(START_ANGLE, END_ANGLE)
        
        cnt += 1
        
    if DISPLAY == True:
        plt.show()
    
    plt.savefig(f"{READ_FOLDER_NAME}/Angle Plot Limited/Combined.png", dpi=300)
    print(f"{READ_FOLDER_NAME}/Angle Plot Limited/Combined.png - SAVED!")
    plt.close()

def createDirectories(READ_FOLDER_NAME: str):
    """ Creates directories for files to be saved in.
        
        Args:
            READ_FOLDER_NAME: Folder name of folder where data files are stored
    """
    try:
        os.mkdir(f"{READ_FOLDER_NAME}/Angle Plot Limited")
        print(f"Directory '{READ_FOLDER_NAME}/Angle Plot Limited' created successfully.")
    except FileExistsError:
        print(f"Directory '{READ_FOLDER_NAME}/Angle Plot Limited' already exists.")
        
    try:
        os.mkdir(f"{READ_FOLDER_NAME}/Point Clouds")
        print(f"Directory '{READ_FOLDER_NAME}/Point Clouds' created successfully.")
    except FileExistsError:
        print(f"Directory '{READ_FOLDER_NAME}/Point Clouds' already exists.")
        
    try:
        os.mkdir(f"{READ_FOLDER_NAME}/Scatter Plot Limited")
        print(f"Directory '{READ_FOLDER_NAME}/Scatter Plot Limited' created successfully.")
    except FileExistsError:
        print(f"Directory '{READ_FOLDER_NAME}/Scatter Plot Limited' already exists.")

def parseArgs() -> argparse.Namespace:
    """ Set up CLI args
    """
    parser = argparse.ArgumentParser(description="Collation of scripts for RPLiDAR S2")
    
    parser.add_argument("read_folder_name",
                        action="store", metavar="READ_FOLDER_NAME",
                        help="Name of folder where data files are stored.")
    
    parser.add_argument("--filename-arr",
                        nargs='+', action="store", type=str, default="",
                        help="Names of data files.")

    parser.add_argument("-maxd", "--max-distance-shown",
                        type=int, default=2,
                        help="Max distance to be shown in Point Cloud (in meters).")

    parser.add_argument("-sa", "--start-angle-affected",
                        type=float, default=350,
                        help="Start angle for affected values.")
    
    parser.add_argument("-ea", "--end-angle-affected",
                        type=float, default=360,
                        help="End angle for affected values.")
    
    parser.add_argument("-sn", "--start-angle-normal",
                        type=float, default=120,
                        help="Start angle for normal values.")
    
    parser.add_argument("-en", "--end-angle-normal",
                        type=float, default=130,
                        help="End angle for normal values.")
    
    parser.add_argument("-d", "--display",
                        default=False, action="store_true",
                        help="If enabled, shows plots before saving.")
    
    
    args = parser.parse_args()
    
    return args
    
def getFilenames(READ_FOLDER_NAME: str) -> list:
    """ Returns list of filenames of RPLiDAR dump files
    
        Args:
            READ_FOLDER_NAME: Folder name of folder where data files are stored
    """
    filename_arr = []
    
    # Iterate through paths in given folder
    for file in os.listdir(READ_FOLDER_NAME):
        print(file, os.path.isfile(os.path.join(READ_FOLDER_NAME, file)))
        
        # If path is a file
        if os.path.isfile(os.path.join(READ_FOLDER_NAME, file)):
            
            # Open file to read first line
            with open(os.path.join(READ_FOLDER_NAME, file), "r") as f:
                
                # Check if first line matches expected header
                if f.readline().strip() == "#RPLIDAR SCAN DATA":
                    filename_arr.append(file)
        
    return filename_arr

def main():
    
    args = parseArgs()
    READ_FOLDER_NAME = args.read_folder_name      # Folder with data files

    MAX_DIST_SHOWN = args.max_distance_shown * 1000

    START_ANGLE_AFFECTED = args.start_angle_affected    # Start angle of AFFECTED range to visualise
    END_ANGLE_AFFECTED = args.end_angle_affected        # End angle of AFFECTED range to visualise

    START_ANGLE_NORMAL = args.start_angle_normal        # Start angle of NORMAL range to visualise
    END_ANGLE_NORMAL = args.end_angle_normal            # End angle of NORMAL range to visualise

    DISPLAY = args.display     # If true, displays each graph before saving
    
    if args.filename_arr == "":
        FILENAME_ARR = getFilenames(READ_FOLDER_NAME)
    else:
        FILENAME_ARR = args.filename_arr
    
    # Create directory to save images
    createDirectories(READ_FOLDER_NAME)
        
    combined_data_arr = []
        
    # Iterate through each data file
    for filename in FILENAME_ARR:
        READ_FILE_NAME = filename
        data_arr = np.empty((0,3))
            
        with open(f"{READ_FOLDER_NAME}/{READ_FILE_NAME}", "r") as f:
            # Skip first 3 lines
            f.readline()
            datacount = f.readline()
            f.readline()
            
            print("-"*20)
            print(f"Viewing: {READ_FILE_NAME}")
            print(f"Total readings: {datacount[7:-1]}")
            
            # Process each line, save data appropriately
            for line in f:
                line_data = line.strip().split(" ")
                
                angle = float(line_data[0])
                distance = float(line_data[1])
                quality = int(line_data[2])

                data_arr = np.vstack([data_arr, [angle, distance, quality]])
                
        combined_data_arr.append(data_arr)
                
        print("Generating point cloud")
        save_pointcloud(data_arr, READ_FOLDER_NAME, READ_FILE_NAME, MAX_DIST_SHOWN, DISPLAY)
        
        print("Generating single angle plot")
        singular_angle_plot_limited(data_arr, READ_FOLDER_NAME, READ_FILE_NAME, START_ANGLE_AFFECTED, END_ANGLE_AFFECTED, DISPLAY)
        
    print("-"*20)
    print("Generating combined angle plot")
    combined_angle_plot_limited(combined_data_arr, READ_FOLDER_NAME, FILENAME_ARR, START_ANGLE_AFFECTED, END_ANGLE_AFFECTED, DISPLAY)
    
    print("Generating combined affected scatter plot")
    combined_scatter_plot_limited(combined_data_arr, READ_FOLDER_NAME, FILENAME_ARR, START_ANGLE_AFFECTED, END_ANGLE_AFFECTED, "Combined Affected", DISPLAY)
    
    print("Generating combined normal scatter plot")
    combined_scatter_plot_limited(combined_data_arr, READ_FOLDER_NAME, FILENAME_ARR, START_ANGLE_NORMAL, END_ANGLE_NORMAL, "Combined Normal", DISPLAY)

if __name__ == "__main__":
    main()