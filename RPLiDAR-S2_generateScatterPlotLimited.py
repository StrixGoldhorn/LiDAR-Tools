'''
MIT License

Copyright (c) 2025 StrixGoldhorn

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.






For SLAMTEC RSLiDAR S2

What this does:
Reads user-provided dump files (generated by SLAMTEC's FrameGrabber app demo).
Generates a scatter plot of all points within START_ANGLE_AFFECTED and END_ANGLE_AFFECTED for data files located in folder READ_FOLDER_NAME.
Generates a scatter plot of all points within START_ANGLE_NORMAL and END_ANGLE_NORMAL for data files located in folder READ_FOLDER_NAME.

How to use:
Upload dump files to folder, change READ_FOLDER_NAME to the folder name.
Change FILENAME_ARR to each of the dumped data file name.

Change START_ANGLE_AFFECTED to desired starting angle of affected range to be shown.
Change END_ANGLE_AFFECTED to desired ending angle of affected range to be shown.

Change START_ANGLE_NORMAL to desired starting angle of unaffected range to be shown.
Change END_ANGLE_NORMAL to desired ending angle of unaffected range to be shown.

Set DISPLAY to True to display each point cloud before saving if required.
'''

import matplotlib.pyplot as plt
import numpy as np
import os

READ_FOLDER_NAME = "10v 1a 50cm copy"      # Folder with data files
FILENAME_ARR = ["control", "50khz", "100khz", "150khz", "200khz"]   # Names of data files

START_ANGLE_AFFECTED = 350   # Start angle of AFFECTED range to visualise
END_ANGLE_AFFECTED = 360     # End angle of AFFECTED range to visualise

START_ANGLE_NORMAL = 260   # Start angle of NORMAL range to visualise
END_ANGLE_NORMAL = 270     # End angle of NORMAL range to visualise

DISPLAY = False     # If true, displays each graph before saving

def polar_to_cartesian(angles: np.ndarray, distances: np.ndarray) -> tuple[np.ndarray, np.ndarray]:
    """ Converts from polar to cartesian coordinate system.
        
        Args:
            angles: np.ndarray of angle values
            distances: np.ndarray of distance values
    """
    # Convert degrees to radians
    radians = np.deg2rad(angles)
    
    # Convert to Cartesian
    x_coords = distances * np.cos(radians)
    y_coords = distances * np.sin(radians)
    
    return x_coords, y_coords

def combined_scatter_plot_limited(combined_data_arr: np.ndarray, READ_FOLDER_NAME: str, FILENAME_ARR: list, START_ANGLE: float, END_ANGLE:float, SAVE_FILE_NAME: str):
    """ Saves (and optionally displays) a scatter plot of
        all points within START_ANGLE and END_ANGLE
        for data files located in folder READ_FOLDER_NAME

        Args:
            combined_data_arr: numpy array with angle, distance, quality, for all data files
            READ_FOLDER_NAME: Folder name of folder where data files are stored
            FILENAME_ARR: Array of filenames of data files in combined_data_arr
            START_ANGLE: Start angle to be processed
            END_ANGLE: End angle to be processed
            SAVE_FILE_NAME: Filename to be saved as
    """
    cnt = 1
    
    # Colors to be used
    colors_arr = ["b", "g", "r", "c", "m", "y", "k", "w"]
    
    fig, ax = plt.subplots()
    
    for data_arr in combined_data_arr:
        angles = data_arr[:, 0]
        distances = data_arr[:, 1]
    
        # Mask to filter the required data        
        mask = (angles >= START_ANGLE) & (angles <= END_ANGLE)
        angles_masked = angles[mask]
        distances_masked = distances[mask]
        
        # Convert from polar to cartesian coords
        x_coords, y_coords = polar_to_cartesian(angles_masked, distances_masked)
        
        # Plot
        ax.scatter(x_coords, y_coords, s=20, c=colors_arr[cnt-1], marker=".", label=FILENAME_ARR[cnt-1])
        
        cnt += 1
    
    # Axes settings
    ax.legend(loc='upper left')
    ax.set_xticks([])
    ax.set_yticks([])
    
    # Add fig label
    fig.suptitle(f"Points from {START_ANGLE} deg to {END_ANGLE} deg")
    
    if DISPLAY == True:
        plt.show()
    
    plt.savefig(f"{READ_FOLDER_NAME}/Scatter Plot Limited/{SAVE_FILE_NAME}.png", dpi=300)
    print(f"{SAVE_FILE_NAME} - SAVED!")
    plt.close()
    
def main():
    # Create directory to save images
    try:
        os.mkdir(f"{READ_FOLDER_NAME}/Scatter Plot Limited")
        print(f"Directory '{READ_FOLDER_NAME}/Scatter Plot Limited' created successfully.")
    except FileExistsError:
        print(f"Directory '{READ_FOLDER_NAME}/Scatter Plot Limited' already exists.")
        
    combined_data_arr = []
        
    # Iterate through each data file
    for filename in FILENAME_ARR:
        READ_FILE_NAME = filename
        data_arr = np.empty((0,3))
            
        with open(f"{READ_FOLDER_NAME}/{READ_FILE_NAME}", "r") as f:
            # Skip first 3 lines
            f.readline()
            datacount = f.readline()
            f.readline()
            
            print("-"*20)
            print(f"Viewing: {READ_FILE_NAME}")
            print(f"Total readings: {datacount[7:-1]}")
            
            # Process each line, save data appropriately
            for line in f:
                line_data = line.strip().split(" ")
                
                angle = float(line_data[0])
                distance = float(line_data[1])
                quality = int(line_data[2])

                data_arr = np.vstack([data_arr, [angle, distance, quality]])
                
        combined_data_arr.append(data_arr)
        
    print("-"*20)
    
    print("Generating combined affected scatter plot")
    combined_scatter_plot_limited(combined_data_arr, READ_FOLDER_NAME, FILENAME_ARR, START_ANGLE_AFFECTED, END_ANGLE_AFFECTED, "Combined Affected")
    
    print("Generating combined normal scatter plot")
    combined_scatter_plot_limited(combined_data_arr, READ_FOLDER_NAME, FILENAME_ARR, START_ANGLE_NORMAL, END_ANGLE_NORMAL, "Combined Normal")

main()