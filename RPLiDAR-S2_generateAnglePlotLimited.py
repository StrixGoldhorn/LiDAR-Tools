'''
MIT License

Copyright (c) 2025 StrixGoldhorn

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.






For SLAMTEC RSLiDAR S2

What this does:
Reads user-provided dump files (generated by SLAMTEC's FrameGrabber app demo).
Generates INDIVIDUAL visualisation of whether data exists at user-specified angle range, saves to folder.
Generates COMBINED visualisation of whether data exists at user-specified angle range, saves to folder.

How to use:
Upload dump files to folder, change READ_FOLDER_NAME to the folder name.
Change FILENAME_ARR to each of the dumped data file name.
Change START_ANGLE to desired starting angle of visualisation.
Change END_ANGLE to desired ending angle of visualisation.

Set DISPLAY to True to display each point cloud before saving if required.
'''

import matplotlib.pyplot as plt
import numpy as np
import os

READ_FOLDER_NAME = "folder_with_datafiles"      # Folder with data files
FILENAME_ARR = ["control", "50khz", "100khz"]   # Names of data files
START_ANGLE = 350   # Start angle to visualise
END_ANGLE = 360     # End angle to visualise

DISPLAY = False     # If true, displays each graph before saving

def singular_angle_plot_limited(data_arr, READ_FOLDER_NAME, READ_FILE_NAME, START_ANGLE, END_ANGLE):
    """ Saves (and optionally displays) plot of
        whether a datapoint exists at angle x, where START_ANGLE <= x <= END_ANGLE
        for data file READ_FILE_NAME located in folder READ_FOLDER_NAME

        Args:
            data_arr: numpy array with angle, distance, quality
            READ_FOLDER_NAME: Folder name of folder where data files are stored
            READ_FILE_NAME: Filename of data file to be processed
            START_ANGLE: Start angle to be processed
            END_ANGLE: End angle to be processed
    """
    angles = data_arr[:, 0]
    
    # Mask to filter the required data
    mask = (angles >= START_ANGLE) & (angles <= END_ANGLE)
    
    # These are the x-values that will be plotted
    plot_angles = angles[mask]
    
    # Set all y-values to 1
    plot_distances = np.ones_like(plot_angles)

    # Plot
    plt.scatter(plot_angles, plot_distances, s=15)
    
    # Marking settings
    plt.xlabel('Angle (degrees)')
    plt.yticks([])
    plt.grid(True, linestyle='--', alpha=0.5)
    
    # View settings
    plt.xlim(START_ANGLE, END_ANGLE)
    
    if DISPLAY == True:
        plt.show()
    
    plt.savefig(f"{READ_FOLDER_NAME}/Angle Plot Limited/{READ_FILE_NAME}.png", dpi=300)
    print(f"SAVED!")
    plt.close()

def combined_angle_plot_limited(combined_data_arr, READ_FOLDER_NAME, FILENAME_ARR, START_ANGLE, END_ANGLE):
    """ Saves (and optionally displays) a combined plot of
        whether a datapoint exists at angle x, where START_ANGLE <= x <= END_ANGLE
        for data file READ_FILE_NAME located in folder READ_FOLDER_NAME

        Args:
            combined_data_arr: numpy array with angle, distance, quality, for all data files
            READ_FOLDER_NAME: Folder name of folder where data files are stored
            FILENAME_ARR: Array of filenames of data files in combined_data_arr
            START_ANGLE: Start angle to be processed
            END_ANGLE: End angle to be processed
    """
    cnt = 1
    total_graphs = len(combined_data_arr)
    
    for data_arr in combined_data_arr:
        angles = data_arr[:, 0]
    
        # Mask to filter the required data        
        mask = (angles >= START_ANGLE) & (angles <= END_ANGLE)
        
        # These are the x-values that will be plotted
        plot_angles = angles[mask]
        
        # Set all y-values to 1
        plot_distances = np.ones_like(plot_angles)
        
        # Plot
        plt.subplot(total_graphs, 1, cnt)
        plt.scatter(plot_angles, plot_distances, s=15)
        
        # Marking settings
        # If last subplot, set label and show degrees
        if cnt == total_graphs:
            plt.xlabel('Angle (degrees)')
        else:
            plt.xticks([])
        plt.ylabel(FILENAME_ARR[cnt-1])
        plt.yticks([])
        plt.grid(True, linestyle='--', alpha=0.5)
        
        # View settings
        plt.xlim(START_ANGLE, END_ANGLE)
        
        cnt += 1
        
    if DISPLAY == True:
        plt.show()
    
    plt.savefig(f"{READ_FOLDER_NAME}/Angle Plot Limited/Combined.png", dpi=300)
    print(f"SAVED!")
    plt.close()
    
def main():
    # Create directory to save images
    try:
        os.mkdir(f"{READ_FOLDER_NAME}/Angle Plot Limited")
        print(f"Directory '{READ_FOLDER_NAME}/Angle Plot Limited' created successfully.")
    except FileExistsError:
        print(f"Directory '{READ_FOLDER_NAME}/Angle Plot Limited' already exists.")
        
    combined_data_arr = []
        
    # Iterate through each data file
    for filename in FILENAME_ARR:
        READ_FILE_NAME = filename
        data_arr = np.empty((0,3))
            
        with open(f"{READ_FOLDER_NAME}/{READ_FILE_NAME}", "r") as f:
            # Skip first 3 lines
            f.readline()
            datacount = f.readline()
            f.readline()
            
            print("-"*20)
            print(f"Viewing: {READ_FILE_NAME}")
            print(f"Total readings: {datacount[7:-1]}")
            
            # Process each line, save data appropriately
            for line in f:
                line_data = line.strip().split(" ")
                
                angle = float(line_data[0])
                distance = float(line_data[1])
                quality = int(line_data[2])

                data_arr = np.vstack([data_arr, [angle, distance, quality]])
                
        combined_data_arr.append(data_arr)
                
        print("Generating angle plot")
        singular_angle_plot_limited(data_arr, READ_FOLDER_NAME, READ_FILE_NAME, START_ANGLE, END_ANGLE)
        
    print("-"*20)
    print("Generating combined angle plot")
    combined_angle_plot_limited(combined_data_arr, READ_FOLDER_NAME, FILENAME_ARR, START_ANGLE, END_ANGLE)

main()